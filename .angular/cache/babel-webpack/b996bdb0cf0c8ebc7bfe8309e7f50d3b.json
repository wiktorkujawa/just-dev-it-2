{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { FormlySelectModule } from '@ngx-formly/core/select';\nimport { Component, ViewChildren, NgModule } from '@angular/core';\nimport { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';\nimport { MatCheckbox, MatCheckboxModule } from '@angular/material/checkbox';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/checkbox';\nimport * as ɵngcc3 from '@ngx-formly/core';\nimport * as ɵngcc4 from '@ngx-formly/core/select';\n\nfunction FormlyFieldMultiCheckbox_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"mat-checkbox\", 1);\n    ɵngcc0.ɵɵlistener(\"change\", function FormlyFieldMultiCheckbox_ng_container_0_Template_mat_checkbox_change_1_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r4);\n      const option_r1 = restoredCtx.$implicit;\n      const ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.onChange(option_r1.value, $event.checked);\n    });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const option_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id + \"_\" + i_r2)(\"formlyAttributes\", ctx_r0.field)(\"tabIndex\", ctx_r0.to.tabindex)(\"color\", ctx_r0.to.color)(\"labelPosition\", ctx_r0.to.labelPosition)(\"checked\", ctx_r0.isChecked(option_r1))(\"disabled\", ctx_r0.formControl.disabled);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", option_r1.label, \" \");\n  }\n}\n\nlet FormlyFieldMultiCheckbox = /*#__PURE__*/(() => {\n  class FormlyFieldMultiCheckbox extends FieldType {\n    constructor() {\n      super(...arguments);\n      this.defaultOptions = {\n        templateOptions: {\n          hideFieldUnderline: true,\n          floatLabel: 'always',\n          options: [],\n          color: 'accent'\n        }\n      };\n    }\n    /**\n     * @param {?} value\n     * @param {?} checked\n     * @return {?}\n     */\n\n\n    onChange(value, checked) {\n      if (this.to.type === 'array') {\n        this.formControl.patchValue(checked ? [...(this.formControl.value || []), value] : [...(this.formControl.value || [])].filter(\n        /**\n        * @param {?} o\n        * @return {?}\n        */\n        o => o !== value));\n      } else {\n        this.formControl.patchValue(Object.assign({}, this.formControl.value, {\n          [value]: checked\n        }));\n      }\n\n      this.formControl.markAsTouched();\n    } // TODO: find a solution to prevent scroll on focus\n\n    /**\n     * @return {?}\n     */\n\n\n    onContainerClick() {}\n    /**\n     * @param {?} option\n     * @return {?}\n     */\n\n\n    isChecked(option) {\n      /** @type {?} */\n      const value = this.formControl.value;\n      return value && (this.to.type === 'array' ? value.indexOf(option.value) !== -1 : value[option.value]);\n    }\n\n  }\n\n  FormlyFieldMultiCheckbox.ɵfac = /*@__PURE__*/function () {\n    let ɵFormlyFieldMultiCheckbox_BaseFactory;\n    return function FormlyFieldMultiCheckbox_Factory(t) {\n      return (ɵFormlyFieldMultiCheckbox_BaseFactory || (ɵFormlyFieldMultiCheckbox_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldMultiCheckbox)))(t || FormlyFieldMultiCheckbox);\n    };\n  }();\n\n  FormlyFieldMultiCheckbox.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: FormlyFieldMultiCheckbox,\n    selectors: [[\"formly-field-mat-multicheckbox\"]],\n    viewQuery: function FormlyFieldMultiCheckbox_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatCheckbox, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.checkboxes = _t);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 6,\n    consts: [[4, \"ngFor\", \"ngForOf\"], [3, \"id\", \"formlyAttributes\", \"tabIndex\", \"color\", \"labelPosition\", \"checked\", \"disabled\", \"change\"]],\n    template: function FormlyFieldMultiCheckbox_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, FormlyFieldMultiCheckbox_ng_container_0_Template, 3, 8, \"ng-container\", 0);\n        ɵngcc0.ɵɵpipe(1, \"async\");\n        ɵngcc0.ɵɵpipe(2, \"formlySelectOptions\");\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ɵngcc0.ɵɵpipeBind1(1, 1, ɵngcc0.ɵɵpipeBind2(2, 3, ctx.to.options, ctx.field)));\n      }\n    },\n    directives: [ɵngcc1.NgForOf, ɵngcc2.MatCheckbox, ɵngcc3.FormlyAttributes],\n    pipes: [ɵngcc1.AsyncPipe, ɵngcc4.ɵa],\n    encapsulation: 2\n  });\n  return FormlyFieldMultiCheckbox;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet FormlyMatMultiCheckboxModule = /*#__PURE__*/(() => {\n  class FormlyMatMultiCheckboxModule {}\n\n  FormlyMatMultiCheckboxModule.ɵfac = function FormlyMatMultiCheckboxModule_Factory(t) {\n    return new (t || FormlyMatMultiCheckboxModule)();\n  };\n\n  FormlyMatMultiCheckboxModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: FormlyMatMultiCheckboxModule\n  });\n  FormlyMatMultiCheckboxModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, ReactiveFormsModule, MatCheckboxModule, FormlyMatFormFieldModule, FormlySelectModule, FormlyModule.forChild({\n      types: [{\n        name: 'multicheckbox',\n        component: FormlyFieldMultiCheckbox,\n        wrappers: ['form-field']\n      }]\n    })]]\n  });\n  return FormlyMatMultiCheckboxModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlyMatMultiCheckboxModule, {\n    declarations: function () {\n      return [FormlyFieldMultiCheckbox];\n    },\n    imports: function () {\n      return [CommonModule, ReactiveFormsModule, MatCheckboxModule, FormlyMatFormFieldModule, FormlySelectModule, ɵngcc3.FormlyModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { FormlyMatMultiCheckboxModule, FormlyFieldMultiCheckbox }; //# sourceMappingURL=ngx-formly-material-multicheckbox.js.map","map":null,"metadata":{},"sourceType":"module"}