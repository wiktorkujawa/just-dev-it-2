{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { catchError, map, concatMap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport * as PostActions from '../actions/post.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/post.service\";\nexport let PostEffects = /*#__PURE__*/(() => {\n  class PostEffects {\n    constructor(actions$, postService) {\n      this.actions$ = actions$;\n      this.postService = postService;\n      this.loadPosts$ = createEffect(() => {\n        return this.actions$.pipe(ofType(PostActions.loadPosts), concatMap(() => this.postService.getPosts().pipe(map(posts => PostActions.loadPostsSuccess({\n          posts\n        })), catchError(error => of(PostActions.loadPostsFailure({\n          error\n        }))))));\n      });\n      this.createPost$ = createEffect(() => {\n        return this.actions$.pipe(ofType(PostActions.addPost), concatMap(action => this.postService.createPost(action.post).pipe(map(post => PostActions.addPostSuccess({\n          post\n        })), catchError(error => of(PostActions.loadPostsFailure({\n          error\n        }))))));\n      });\n      this.removePost$ = createEffect(() => {\n        return this.actions$.pipe(ofType(PostActions.deletePost), concatMap(action => this.postService.removePost(action.id).pipe(map(() => PostActions.deletePostSuccess({\n          id: action.id\n        })), catchError(error => of(PostActions.deletePostFailure({\n          error\n        }))))));\n      });\n    }\n\n  }\n\n  PostEffects.ɵfac = function PostEffects_Factory(t) {\n    return new (t || PostEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.PostService));\n  };\n\n  PostEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostEffects,\n    factory: PostEffects.ɵfac\n  });\n  return PostEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}