{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatFormField, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { ViewChild, Type, Component, Renderer2, ElementRef, ViewContainerRef, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FieldType, ɵdefineHiddenProp, FieldWrapper, FormlyConfig, FormlyModule } from '@ngx-formly/core';\nimport { Subject } from 'rxjs';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@ngx-formly/core';\nimport * as ɵngcc2 from '@angular/cdk/a11y';\nimport * as ɵngcc3 from '@angular/material/form-field';\nimport * as ɵngcc4 from '@angular/common';\nconst _c0 = [\"matPrefix\"];\nconst _c1 = [\"matSuffix\"];\nconst _c2 = [\"fieldComponent\"];\n\nfunction FormlyWrapperFormField_mat_label_3_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtext(1, \"*\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction FormlyWrapperFormField_mat_label_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-label\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵtemplate(2, FormlyWrapperFormField_mat_label_3_span_2_Template, 2, 0, \"span\", 7);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.to.label, \" \");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.to.required && ctx_r1.to.hideRequiredMarker !== true);\n  }\n}\n\nfunction FormlyWrapperFormField_ng_container_4_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction FormlyWrapperFormField_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0, 9);\n    ɵngcc0.ɵɵtemplate(1, FormlyWrapperFormField_ng_container_4_ng_container_1_Template, 1, 0, \"ng-container\", 10);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.to.prefix ? ctx_r2.to.prefix : ctx_r2.to._matPrefix);\n  }\n}\n\nfunction FormlyWrapperFormField_ng_container_5_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction FormlyWrapperFormField_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0, 11);\n    ɵngcc0.ɵɵtemplate(1, FormlyWrapperFormField_ng_container_5_ng_container_1_Template, 1, 0, \"ng-container\", 10);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r3.to.suffix ? ctx_r3.to.suffix : ctx_r3.to._matSuffix);\n  }\n}\n\nfunction FormlyWrapperFormField_mat_hint_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-hint\", 12);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", null);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r4.to.description);\n  }\n}\n\nclass FormlyErrorStateMatcher {\n  /**\n   * @param {?} field\n   */\n  constructor(field) {\n    this.field = field;\n  }\n  /**\n   * @param {?} control\n   * @param {?} form\n   * @return {?}\n   */\n\n\n  isErrorState(control, form) {\n    return this.field && this.field.showError;\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @abstract\n * @template F\n */\n\n\nlet FieldType$1 = /*#__PURE__*/(() => {\n  class FieldType$1 extends FieldType {\n    constructor() {\n      super(...arguments);\n      this.errorStateMatcher = new FormlyErrorStateMatcher(this);\n      this.stateChanges = new Subject();\n      this._errorState = false;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get formFieldControl() {\n      return this._control || this;\n    }\n    /**\n     * @param {?} control\n     * @return {?}\n     */\n\n\n    set formFieldControl(control) {\n      this._control = control;\n\n      if (this.formField && control !== this.formField._control) {\n        this.formField._control = control;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      if (this.formField) {\n        this.formField._control = this.formFieldControl;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterViewInit() {\n      if (this.matPrefix || this.matSuffix) {\n        setTimeout(\n        /**\n        * @return {?}\n        */\n        () => {\n          ɵdefineHiddenProp(this.field, '_matprefix', this.matPrefix);\n          ɵdefineHiddenProp(this.field, '_matsuffix', this.matSuffix);\n\n          /** @type {?} */\n          this.options._markForCheck(this.field);\n        });\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      if (this.formField) {\n        delete this.formField._control;\n      }\n\n      this.stateChanges.complete();\n    }\n    /**\n     * @param {?} ids\n     * @return {?}\n     */\n\n\n    setDescribedByIds(ids) {}\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    onContainerClick(event) {\n      this.field.focus = true;\n      this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get errorState() {\n      /** @type {?} */\n      const showError =\n      /** @type {?} */\n\n      /** @type {?} */\n      this.options.showError(this);\n\n      if (showError !== this._errorState) {\n        this._errorState = showError;\n        this.stateChanges.next();\n      }\n\n      return showError;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get controlType() {\n      if (this.to.type) {\n        return this.to.type;\n      }\n\n      if (\n      /** @type {?} */\n      this.field.type instanceof Type) {\n        return (\n          /** @type {?} */\n          this.field.type.constructor.name\n        );\n      }\n\n      return (\n        /** @type {?} */\n        this.field.type\n      );\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get focused() {\n      return !!this.field.focus && !this.disabled;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get disabled() {\n      return !!this.to.disabled;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get required() {\n      return !!this.to.required;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get placeholder() {\n      return this.to.placeholder || '';\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get shouldPlaceholderFloat() {\n      return this.shouldLabelFloat;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get value() {\n      return this.formControl.value;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set value(value) {\n      this.formControl.patchValue(value);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get ngControl() {\n      return (\n        /** @type {?} */\n        this.formControl\n      );\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get empty() {\n      return this.value === undefined || this.value === null || this.value === '';\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get shouldLabelFloat() {\n      return this.focused || !this.empty;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get formField() {\n      return this.field ?\n      /** @type {?} */\n      this.field['__formField__'] : null;\n    }\n\n  }\n\n  FieldType$1.ɵfac = /*@__PURE__*/function () {\n    let ɵFieldType$1_BaseFactory;\n    return function FieldType$1_Factory(t) {\n      return (ɵFieldType$1_BaseFactory || (ɵFieldType$1_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FieldType$1)))(t || FieldType$1);\n    };\n  }();\n\n  FieldType$1.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: FieldType$1,\n    viewQuery: function FieldType$1_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.matPrefix = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.matSuffix = _t.first);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return FieldType$1;\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nlet FormlyWrapperFormField = /*#__PURE__*/(() => {\n  class FormlyWrapperFormField extends FieldWrapper {\n    /**\n     * @param {?} config\n     * @param {?} renderer\n     * @param {?} elementRef\n     * @param {?} focusMonitor\n     */\n    constructor(config, renderer, elementRef, focusMonitor) {\n      super();\n      this.config = config;\n      this.renderer = renderer;\n      this.elementRef = elementRef;\n      this.focusMonitor = focusMonitor;\n      this.stateChanges = new Subject();\n      this._errorState = false;\n      this.initialGapCalculated = false;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      this.formField._control = this;\n      ɵdefineHiddenProp(this.field, '__formField__', this.formField);\n      /** @type {?} */\n\n      const ref = this.config.resolveFieldTypeRef(this.formlyField);\n\n      if (ref && !(ref.instance instanceof FieldType$1)) {\n        console.warn(`Component '${ref.componentType.name}' must extend 'FieldType' from '@ngx-formly/material/form-field'.`);\n      } // fix for https://github.com/angular/material2/issues/11437\n\n\n      if (this.formlyField.hide &&\n      /** @type {?} */\n      this.formlyField.templateOptions.appearance === 'outline') {\n        this.initialGapCalculated = true;\n      }\n\n      this.focusMonitor.monitor(this.elementRef, true).subscribe(\n      /**\n      * @param {?} origin\n      * @return {?}\n      */\n      origin => {\n        if (!origin && this.field.focus) {\n          this.field.focus = false;\n        }\n\n        this.stateChanges.next();\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterContentChecked() {\n      if (!this.initialGapCalculated || this.formlyField.hide) {\n        return;\n      }\n\n      this.formField.updateOutlineGap();\n      this.initialGapCalculated = true;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterViewInit() {\n      // temporary fix for https://github.com/angular/material2/issues/7891\n      if (this.formField.appearance !== 'outline' && this.to.hideFieldUnderline === true) {\n        /** @type {?} */\n        const underlineElement = this.formField._elementRef.nativeElement.querySelector('.mat-form-field-underline');\n\n        underlineElement && this.renderer.removeChild(underlineElement.parentNode, underlineElement);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      delete this.formlyField.__formField__;\n      this.stateChanges.complete();\n      this.focusMonitor.stopMonitoring(this.elementRef);\n    }\n    /**\n     * @param {?} ids\n     * @return {?}\n     */\n\n\n    setDescribedByIds(ids) {}\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    onContainerClick(event) {\n      this.formlyField.focus = true;\n      this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get errorState() {\n      /** @type {?} */\n      const showError =\n      /** @type {?} */\n\n      /** @type {?} */\n      this.options.showError(this);\n\n      if (showError !== this._errorState) {\n        this._errorState = showError;\n        this.stateChanges.next();\n      }\n\n      return showError;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get controlType() {\n      return this.to.type;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get focused() {\n      return !!this.formlyField.focus && !this.disabled;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get disabled() {\n      return !!this.to.disabled;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get required() {\n      return !!this.to.required;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get placeholder() {\n      return this.to.placeholder || '';\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get shouldPlaceholderFloat() {\n      return this.shouldLabelFloat;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get value() {\n      return this.formControl.value;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get ngControl() {\n      return (\n        /** @type {?} */\n        this.formControl\n      );\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get empty() {\n      return !this.formControl.value;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get shouldLabelFloat() {\n      return this.focused || !this.empty;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get formlyField() {\n      return (\n        /** @type {?} */\n        this.field\n      );\n    }\n\n  }\n\n  FormlyWrapperFormField.ɵfac = function FormlyWrapperFormField_Factory(t) {\n    return new (t || FormlyWrapperFormField)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormlyConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FocusMonitor));\n  };\n\n  FormlyWrapperFormField.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: FormlyWrapperFormField,\n    selectors: [[\"formly-wrapper-mat-form-field\"]],\n    viewQuery: function FormlyWrapperFormField_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c2, 7, ViewContainerRef);\n        ɵngcc0.ɵɵviewQuery(MatFormField, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.fieldComponent = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.formField = _t.first);\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MatFormFieldControl,\n      useExisting: FormlyWrapperFormField\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 9,\n    vars: 9,\n    consts: [[3, \"hideRequiredMarker\", \"floatLabel\", \"appearance\", \"color\"], [\"fieldComponent\", \"\"], [4, \"ngIf\"], [\"matPrefix\", \"\", 4, \"ngIf\"], [\"matSuffix\", \"\", 4, \"ngIf\"], [3, \"field\"], [3, \"id\", 4, \"ngIf\"], [\"aria-hidden\", \"true\", \"class\", \"mat-form-field-required-marker\", 4, \"ngIf\"], [\"aria-hidden\", \"true\", 1, \"mat-form-field-required-marker\"], [\"matPrefix\", \"\"], [4, \"ngTemplateOutlet\"], [\"matSuffix\", \"\"], [3, \"id\"]],\n    template: function FormlyWrapperFormField_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"mat-form-field\", 0);\n        ɵngcc0.ɵɵelementContainer(1, null, 1);\n        ɵngcc0.ɵɵtemplate(3, FormlyWrapperFormField_mat_label_3_Template, 3, 2, \"mat-label\", 2);\n        ɵngcc0.ɵɵtemplate(4, FormlyWrapperFormField_ng_container_4_Template, 2, 1, \"ng-container\", 3);\n        ɵngcc0.ɵɵtemplate(5, FormlyWrapperFormField_ng_container_5_Template, 2, 1, \"ng-container\", 4);\n        ɵngcc0.ɵɵelementStart(6, \"mat-error\");\n        ɵngcc0.ɵɵelement(7, \"formly-validation-message\", 5);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(8, FormlyWrapperFormField_mat_hint_8_Template, 2, 2, \"mat-hint\", 6);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"hideRequiredMarker\", true)(\"floatLabel\", ctx.to.floatLabel)(\"appearance\", ctx.to.appearance)(\"color\", ctx.to.color);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.to.label && ctx.to.hideLabel !== true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.to.prefix || ctx.to._matPrefix);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.to.suffix || ctx.to._matSuffix);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"field\", ctx.field);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.to.description);\n      }\n    },\n    directives: [ɵngcc3.MatFormField, ɵngcc4.NgIf, ɵngcc3.MatError, ɵngcc1.ɵc, ɵngcc3.MatLabel, ɵngcc3.MatPrefix, ɵngcc4.NgTemplateOutlet, ɵngcc3.MatSuffix, ɵngcc3.MatHint],\n    styles: [\"formly-wrapper-mat-form-field .mat-form-field{width:100%}formly-wrapper-mat-form-field .mat-form-field-subscript-wrapper,formly-wrapper-mat-form-field .mat-form-field-underline{position:static}\"],\n    encapsulation: 2\n  });\n  /** @nocollapse */\n\n  return FormlyWrapperFormField;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet FormlyMatFormFieldModule = /*#__PURE__*/(() => {\n  class FormlyMatFormFieldModule {}\n\n  FormlyMatFormFieldModule.ɵfac = function FormlyMatFormFieldModule_Factory(t) {\n    return new (t || FormlyMatFormFieldModule)();\n  };\n\n  FormlyMatFormFieldModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: FormlyMatFormFieldModule\n  });\n  FormlyMatFormFieldModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, ReactiveFormsModule, MatFormFieldModule, FormlyModule.forChild({\n      wrappers: [{\n        name: 'form-field',\n        component: FormlyWrapperFormField\n      }]\n    })]]\n  });\n  return FormlyMatFormFieldModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlyMatFormFieldModule, {\n    declarations: function () {\n      return [FormlyWrapperFormField];\n    },\n    imports: function () {\n      return [CommonModule, ReactiveFormsModule, MatFormFieldModule, ɵngcc1.FormlyModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { FormlyMatFormFieldModule, FieldType$1 as FieldType, FormlyWrapperFormField as ɵa }; //# sourceMappingURL=ngx-formly-material-form-field.js.map","map":null,"metadata":{},"sourceType":"module"}