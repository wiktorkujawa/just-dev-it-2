{"ast":null,"code":"import { createEntityAdapter } from '@ngrx/entity';\nimport { createReducer, on } from '@ngrx/store';\nimport * as UserActions from '../actions/user.actions';\nexport const userFeatureKey = 'user';\nexport const adapter = createEntityAdapter({\n  selectId: () => 'user'\n});\nexport const initialState = adapter.getInitialState({\n  message: undefined\n});\nexport const reducer = createReducer(initialState, on(UserActions.loadUserSuccess, (state, action) => adapter.setOne(action.user[0], state)), on(UserActions.loadUserFailure, (state, {\n  error\n}) => {\n  return Object.assign(Object.assign({}, state), {\n    error\n  });\n}), on(UserActions.registerSuccess, (state, {\n  success\n}) => {\n  return Object.assign(Object.assign({}, state), {\n    message: [success]\n  });\n}), on(UserActions.registerFailure, (state, {\n  error\n}) => {\n  return Object.assign(Object.assign({}, state), {\n    message: error.error\n  });\n}), on(UserActions.loginSuccess, (state, action) => adapter.setOne(action.data[0], Object.assign(Object.assign({}, state), {\n  message: state.message\n}))), on(UserActions.loginFailure, (state, {\n  error\n}) => {\n  return Object.assign(Object.assign({}, state), {\n    message: error.error\n  });\n}), on(UserActions.logoutSuccess, (state, action) => {\n  return Object.assign(Object.assign({}, state), {\n    entities: {\n      user: null\n    },\n    message: action.success\n  });\n}), on(UserActions.logoutFailure, (state, {\n  error\n}) => {\n  return Object.assign(Object.assign({}, state), {\n    error\n  });\n}));\nexport const selectMessage = state => state.message;\nexport const {\n  selectIds,\n  selectEntities,\n  selectAll,\n  selectTotal\n} = adapter.getSelectors();","map":null,"metadata":{},"sourceType":"module"}