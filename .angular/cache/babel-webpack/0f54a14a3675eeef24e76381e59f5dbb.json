{"ast":null,"code":"import { Breakpoints } from '@angular/cdk/layout';\nimport { select } from '@ngrx/store';\nimport { addPost, deletePost, loadPosts } from '../../store/actions/post.actions';\nimport { selectPosts } from '../../store/selectors/post.selectors';\nimport { AddPostComponent } from '../add-post/add-post.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"@angular/cdk/layout\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/grid-list\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"../item-list/item-list.component\";\nconst _c0 = [\"child\"];\n\nfunction ListComponent_mat_grid_tile_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-grid-tile\");\n    i0.ɵɵelementStart(1, \"app-item-list\", 4, 5);\n    i0.ɵɵlistener(\"deletePost\", function ListComponent_mat_grid_tile_4_Template_app_item_list_deletePost_1_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.deletePost($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const post_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"todo\", post_r1);\n  }\n}\n\nconst _c1 = function (a0) {\n  return {\n    \"margin\": a0\n  };\n};\n\nexport let ListComponent = /*#__PURE__*/(() => {\n  class ListComponent {\n    constructor(store, dialog, breakpointObserver) {\n      this.store = store;\n      this.dialog = dialog;\n      this.breakpointObserver = breakpointObserver;\n      this.Breakpoint = {\n        grid: {\n          xl: 5,\n          lg: 4,\n          md: 3,\n          sm: 2,\n          xs: 1\n        },\n        margin: {\n          xl: \"2rem\",\n          lg: \"1.7rem\",\n          md: \"1.4rem\",\n          sm: \"1.1rem\",\n          xs: \"0.8rem\"\n        },\n        gutter: {\n          xl: \"50px\",\n          lg: \"40px\",\n          md: \"30px\",\n          sm: \"20px\",\n          xs: \"10px\"\n        }\n      };\n      this.breakpointObserver.observe([Breakpoints.XSmall, Breakpoints.Small, Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge]).subscribe(result => {\n        if (result.matches) {\n          if (result.breakpoints[Breakpoints.XSmall]) {\n            this.cols = this.Breakpoint.grid.xs;\n            this.margin = this.Breakpoint.margin.xs;\n            this.gutter = this.Breakpoint.gutter.xs;\n          }\n\n          if (result.breakpoints[Breakpoints.Small]) {\n            this.cols = this.Breakpoint.grid.sm;\n            this.margin = this.Breakpoint.margin.sm;\n            this.gutter = this.Breakpoint.gutter.sm;\n          }\n\n          if (result.breakpoints[Breakpoints.Medium]) {\n            this.cols = this.Breakpoint.grid.md;\n            this.margin = this.Breakpoint.margin.md;\n            this.gutter = this.Breakpoint.gutter.md;\n          }\n\n          if (result.breakpoints[Breakpoints.Large]) {\n            this.cols = this.Breakpoint.grid.lg;\n            this.margin = this.Breakpoint.margin.lg;\n            this.gutter = this.Breakpoint.gutter.lg;\n          }\n\n          if (result.breakpoints[Breakpoints.XLarge]) {\n            this.cols = this.Breakpoint.grid.xl;\n            this.margin = this.Breakpoint.margin.xl;\n            this.gutter = this.Breakpoint.gutter.xl;\n          }\n        }\n      });\n    }\n\n    addModal() {\n      const ref = this.dialog.open(AddPostComponent, {\n        width: '60vw',\n        minWidth: \"350px\",\n        panelClass: 'my-dialog'\n      });\n      const sub = ref.componentInstance.addPost.subscribe(post => {\n        this.store.dispatch(addPost({\n          post: post\n        }));\n      });\n      ref.afterClosed().subscribe(() => {\n        sub.unsubscribe();\n      });\n    }\n\n    deletePost(id) {\n      this.store.dispatch(deletePost({\n        id: id\n      }));\n    }\n\n    ngOnInit() {\n      this.loadNewPosts();\n    }\n\n    loadNewPosts() {\n      this.store.dispatch(loadPosts());\n      this.posts$ = this.store.pipe(select(selectPosts));\n    }\n\n  }\n\n  ListComponent.ɵfac = function ListComponent_Factory(t) {\n    return new (t || ListComponent)(i0.ɵɵdirectiveInject(i1.Store), i0.ɵɵdirectiveInject(i2.MatDialog), i0.ɵɵdirectiveInject(i3.BreakpointObserver));\n  };\n\n  ListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ListComponent,\n    selectors: [[\"app-list\"]],\n    viewQuery: function ListComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.child = _t);\n      }\n    },\n    decls: 6,\n    vars: 8,\n    consts: [[1, \"d-flex\", \"justify-content-center\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", 1, \"add-button\", 3, \"click\"], [\"rowHeight\", \"1:1\", 3, \"cols\", \"gutterSize\", \"ngStyle\"], [4, \"ngFor\", \"ngForOf\"], [3, \"todo\", \"deletePost\"], [\"child\", \"\"]],\n    template: function ListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function ListComponent_Template_button_click_1_listener() {\n          return ctx.addModal();\n        });\n        i0.ɵɵtext(2, \"Add Post\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"mat-grid-list\", 2);\n        i0.ɵɵtemplate(4, ListComponent_mat_grid_tile_4_Template, 3, 1, \"mat-grid-tile\", 3);\n        i0.ɵɵpipe(5, \"async\");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"cols\", ctx.cols)(\"gutterSize\", ctx.gutter)(\"ngStyle\", i0.ɵɵpureFunction1(6, _c1, ctx.margin));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(5, 4, ctx.posts$));\n      }\n    },\n    directives: [i4.MatButton, i5.MatGridList, i6.NgStyle, i6.NgForOf, i5.MatGridTile, i7.ItemListComponent],\n    pipes: [i6.AsyncPipe],\n    styles: [\"\"]\n  });\n  return ListComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}