{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormlySelectModule } from '@ngx-formly/core/select';\nimport { Component, ViewChild, NgModule } from '@angular/core';\nimport { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';\nimport { MatRadioGroup, MatRadioModule } from '@angular/material/radio';\nimport { ɵwrapProperty, FormlyModule } from '@ngx-formly/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/material/radio';\nimport * as ɵngcc2 from '@angular/forms';\nimport * as ɵngcc3 from '@ngx-formly/core';\nimport * as ɵngcc4 from '@angular/common';\nimport * as ɵngcc5 from '@ngx-formly/core/select';\n\nfunction FormlyFieldRadio_mat_radio_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-radio-button\", 2);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id + \"_\" + i_r2)(\"color\", ctx_r0.to.color)(\"labelPosition\", ctx_r0.to.labelPosition)(\"disabled\", option_r1.disabled)(\"value\", option_r1.value);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", option_r1.label, \" \");\n  }\n}\n\nlet FormlyFieldRadio = /*#__PURE__*/(() => {\n  class FormlyFieldRadio extends FieldType {\n    constructor() {\n      super(...arguments);\n      this.defaultOptions = {\n        templateOptions: {\n          hideFieldUnderline: true,\n          floatLabel: 'always',\n          options: [],\n          tabindex: -1\n        }\n      };\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterViewInit() {\n      this.focusObserver = ɵwrapProperty(this.field, 'focus',\n      /**\n      * @param {?} __0\n      * @return {?}\n      */\n      ({\n        currentValue\n      }) => {\n        if (this.to.tabindex === -1 && currentValue && this.radioGroup._radios.length > 0) {\n          // https://github.com/ngx-formly/ngx-formly/issues/2498\n          setTimeout(\n          /**\n          * @return {?}\n          */\n          () => {\n            /** @type {?} */\n            const radio = this.radioGroup.selected ? this.radioGroup.selected : this.radioGroup._radios.first;\n\n            radio._elementRef.nativeElement.focus({\n              preventScroll: true\n            });\n          });\n        }\n      });\n    } // TODO: find a solution to prevent scroll on focus\n\n    /**\n     * @return {?}\n     */\n\n\n    onContainerClick() {}\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this.focusObserver && this.focusObserver();\n    }\n\n  }\n\n  FormlyFieldRadio.ɵfac = /*@__PURE__*/function () {\n    let ɵFormlyFieldRadio_BaseFactory;\n    return function FormlyFieldRadio_Factory(t) {\n      return (ɵFormlyFieldRadio_BaseFactory || (ɵFormlyFieldRadio_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldRadio)))(t || FormlyFieldRadio);\n    };\n  }();\n\n  FormlyFieldRadio.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: FormlyFieldRadio,\n    selectors: [[\"formly-field-mat-radio\"]],\n    viewQuery: function FormlyFieldRadio_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatRadioGroup, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.radioGroup = _t.first);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 4,\n    vars: 10,\n    consts: [[3, \"formControl\", \"formlyAttributes\", \"required\", \"tabindex\"], [3, \"id\", \"color\", \"labelPosition\", \"disabled\", \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"id\", \"color\", \"labelPosition\", \"disabled\", \"value\"]],\n    template: function FormlyFieldRadio_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"mat-radio-group\", 0);\n        ɵngcc0.ɵɵtemplate(1, FormlyFieldRadio_mat_radio_button_1_Template, 2, 6, \"mat-radio-button\", 1);\n        ɵngcc0.ɵɵpipe(2, \"async\");\n        ɵngcc0.ɵɵpipe(3, \"formlySelectOptions\");\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"formControl\", ctx.formControl)(\"formlyAttributes\", ctx.field)(\"required\", ctx.to.required)(\"tabindex\", ctx.to.tabindex);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ɵngcc0.ɵɵpipeBind1(2, 5, ɵngcc0.ɵɵpipeBind2(3, 7, ctx.to.options, ctx.field)));\n      }\n    },\n    directives: [ɵngcc1.MatRadioGroup, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective, ɵngcc3.FormlyAttributes, ɵngcc2.RequiredValidator, ɵngcc4.NgForOf, ɵngcc1.MatRadioButton],\n    pipes: [ɵngcc4.AsyncPipe, ɵngcc5.ɵa],\n    encapsulation: 2\n  });\n  return FormlyFieldRadio;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet FormlyMatRadioModule = /*#__PURE__*/(() => {\n  class FormlyMatRadioModule {}\n\n  FormlyMatRadioModule.ɵfac = function FormlyMatRadioModule_Factory(t) {\n    return new (t || FormlyMatRadioModule)();\n  };\n\n  FormlyMatRadioModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: FormlyMatRadioModule\n  });\n  FormlyMatRadioModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, ReactiveFormsModule, MatRadioModule, FormlyMatFormFieldModule, FormlySelectModule, FormlyModule.forChild({\n      types: [{\n        name: 'radio',\n        component: FormlyFieldRadio,\n        wrappers: ['form-field']\n      }]\n    })]]\n  });\n  return FormlyMatRadioModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlyMatRadioModule, {\n    declarations: function () {\n      return [FormlyFieldRadio];\n    },\n    imports: function () {\n      return [CommonModule, ReactiveFormsModule, MatRadioModule, FormlyMatFormFieldModule, FormlySelectModule, ɵngcc3.FormlyModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { FormlyMatRadioModule, FormlyFieldRadio }; //# sourceMappingURL=ngx-formly-material-radio.js.map","map":null,"metadata":{},"sourceType":"module"}