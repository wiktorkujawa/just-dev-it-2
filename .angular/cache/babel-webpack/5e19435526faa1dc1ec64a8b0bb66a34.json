{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { FormlySelectModule } from '@ngx-formly/core/select';\nimport { Component, ViewChild, NgModule } from '@angular/core';\nimport { MatSelect, MatSelectModule } from '@angular/material/select';\nimport { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';\nimport { MatPseudoCheckboxModule } from '@angular/material/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/material/select';\nimport * as ɵngcc2 from '@angular/forms';\nimport * as ɵngcc3 from '@ngx-formly/core';\nimport * as ɵngcc4 from '@angular/common';\nimport * as ɵngcc5 from '@angular/material/core';\nimport * as ɵngcc6 from '@ngx-formly/core/select';\n\nfunction FormlyFieldSelect_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"mat-option\", 3);\n    ɵngcc0.ɵɵlistener(\"click\", function FormlyFieldSelect_ng_template_0_Template_mat_option_click_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r5);\n      const selectOptions_r3 = restoredCtx.selectOptions;\n      const ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.toggleSelectAll(selectOptions_r3);\n    });\n    ɵngcc0.ɵɵelement(1, \"mat-pseudo-checkbox\", 4);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const selectOptions_r3 = ctx.selectOptions;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"state\", ctx_r1.getSelectAllState(selectOptions_r3));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.to.selectAllOption, \" \");\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    selectOptions: a0\n  };\n};\n\nfunction FormlyFieldSelect_ng_container_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, 7);\n  }\n\n  if (rf & 2) {\n    const selectOptions_r6 = ɵngcc0.ɵɵnextContext().ngIf;\n    ɵngcc0.ɵɵnextContext();\n\n    const _r0 = ɵngcc0.ɵɵreference(1);\n\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r0)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(2, _c0, selectOptions_r6));\n  }\n}\n\nfunction FormlyFieldSelect_ng_container_3_ng_container_2_mat_optgroup_1_mat_option_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-option\", 12);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const child_r14 = ctx.$implicit;\n    ɵngcc0.ɵɵproperty(\"value\", child_r14.value)(\"disabled\", child_r14.disabled);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", child_r14.label, \" \");\n  }\n}\n\nfunction FormlyFieldSelect_ng_container_3_ng_container_2_mat_optgroup_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-optgroup\", 10);\n    ɵngcc0.ɵɵtemplate(1, FormlyFieldSelect_ng_container_3_ng_container_2_mat_optgroup_1_mat_option_1_Template, 2, 3, \"mat-option\", 11);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r10 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵproperty(\"label\", item_r10.label);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", item_r10.group);\n  }\n}\n\nfunction FormlyFieldSelect_ng_container_3_ng_container_2_mat_option_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-option\", 12);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r10 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵproperty(\"value\", item_r10.value)(\"disabled\", item_r10.disabled);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(item_r10.label);\n  }\n}\n\nfunction FormlyFieldSelect_ng_container_3_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, FormlyFieldSelect_ng_container_3_ng_container_2_mat_optgroup_1_Template, 2, 2, \"mat-optgroup\", 8);\n    ɵngcc0.ɵɵtemplate(2, FormlyFieldSelect_ng_container_3_ng_container_2_mat_option_2_Template, 2, 3, \"mat-option\", 9);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const item_r10 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", item_r10.group);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !item_r10.group);\n  }\n}\n\nfunction FormlyFieldSelect_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, FormlyFieldSelect_ng_container_3_ng_container_1_Template, 1, 4, \"ng-container\", 5);\n    ɵngcc0.ɵɵtemplate(2, FormlyFieldSelect_ng_container_3_ng_container_2_Template, 3, 2, \"ng-container\", 6);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const selectOptions_r6 = ctx.ngIf;\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r2.to.multiple && ctx_r2.to.selectAllOption);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", selectOptions_r6);\n  }\n}\n\nlet FormlyFieldSelect = /*#__PURE__*/(() => {\n  class FormlyFieldSelect extends FieldType {\n    constructor() {\n      super(...arguments);\n      this.defaultOptions = {\n        templateOptions: {\n          options: [],\n\n          /**\n           * @param {?} o1\n           * @param {?} o2\n           * @return {?}\n           */\n          compareWith(o1, o2) {\n            return o1 === o2;\n          }\n\n        }\n      };\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n\n\n    getSelectAllState(options) {\n      if (this.empty || this.value.length === 0) {\n        return '';\n      }\n\n      return this.value.length !== this.getSelectAllValue(options).length ? 'indeterminate' : 'checked';\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n\n\n    toggleSelectAll(options) {\n      /** @type {?} */\n      const selectAllValue = this.getSelectAllValue(options);\n      this.formControl.setValue(!this.value || this.value.length !== selectAllValue.length ? selectAllValue : []);\n      this.formControl.markAsDirty();\n    }\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n\n\n    change($event) {\n      if (this.to.change) {\n        this.to.change(this.field, $event);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _getAriaLabelledby() {\n      if (this.to.attributes && this.to.attributes['aria-labelledby']) {\n        return this.to.attributes['aria-labelledby'];\n      }\n\n      if (this.formField && this.formField._labelId) {\n        return this.formField._labelId;\n      }\n\n      return undefined;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _getAriaLabel() {\n      return this.to.attributes ? this.to.attributes['aria-label'] : undefined;\n    }\n    /**\n     * @private\n     * @param {?} options\n     * @return {?}\n     */\n\n\n    getSelectAllValue(options) {\n      if (!this.selectAllValue || options !== this.selectAllValue.options) {\n        /** @type {?} */\n        const flatOptions = [];\n        options.forEach(\n        /**\n        * @param {?} o\n        * @return {?}\n        */\n        o => o.group ? flatOptions.push(...o.group) : flatOptions.push(o));\n        this.selectAllValue = {\n          options,\n          value: flatOptions.filter(\n          /**\n          * @param {?} o\n          * @return {?}\n          */\n          o => !o.disabled).map(\n          /**\n          * @param {?} o\n          * @return {?}\n          */\n          o => o.value)\n        };\n      }\n\n      return this.selectAllValue.value;\n    }\n\n  }\n\n  FormlyFieldSelect.ɵfac = /*@__PURE__*/function () {\n    let ɵFormlyFieldSelect_BaseFactory;\n    return function FormlyFieldSelect_Factory(t) {\n      return (ɵFormlyFieldSelect_BaseFactory || (ɵFormlyFieldSelect_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldSelect)))(t || FormlyFieldSelect);\n    };\n  }();\n\n  FormlyFieldSelect.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: FormlyFieldSelect,\n    selectors: [[\"formly-field-mat-select\"]],\n    viewQuery: function FormlyFieldSelect_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatSelect, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.formFieldControl = _t.first);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 6,\n    vars: 18,\n    consts: [[\"selectAll\", \"\"], [3, \"id\", \"formControl\", \"formlyAttributes\", \"placeholder\", \"tabIndex\", \"required\", \"compareWith\", \"multiple\", \"errorStateMatcher\", \"aria-label\", \"aria-labelledby\", \"disableOptionCentering\", \"selectionChange\"], [4, \"ngIf\"], [3, \"click\"], [1, \"mat-option-pseudo-checkbox\", 3, \"state\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"label\", 4, \"ngIf\"], [3, \"value\", \"disabled\", 4, \"ngIf\"], [3, \"label\"], [3, \"value\", \"disabled\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\", \"disabled\"]],\n    template: function FormlyFieldSelect_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, FormlyFieldSelect_ng_template_0_Template, 3, 2, \"ng-template\", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵelementStart(2, \"mat-select\", 1);\n        ɵngcc0.ɵɵlistener(\"selectionChange\", function FormlyFieldSelect_Template_mat_select_selectionChange_2_listener($event) {\n          return ctx.change($event);\n        });\n        ɵngcc0.ɵɵtemplate(3, FormlyFieldSelect_ng_container_3_Template, 3, 2, \"ng-container\", 2);\n        ɵngcc0.ɵɵpipe(4, \"async\");\n        ɵngcc0.ɵɵpipe(5, \"formlySelectOptions\");\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.id)(\"formControl\", ctx.formControl)(\"formlyAttributes\", ctx.field)(\"placeholder\", ctx.to.placeholder)(\"tabIndex\", ctx.to.tabindex)(\"required\", ctx.to.required)(\"compareWith\", ctx.to.compareWith)(\"multiple\", ctx.to.multiple)(\"errorStateMatcher\", ctx.errorStateMatcher)(\"aria-label\", ctx._getAriaLabel())(\"aria-labelledby\", ctx._getAriaLabelledby())(\"disableOptionCentering\", ctx.to.disableOptionCentering);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ɵngcc0.ɵɵpipeBind1(4, 13, ɵngcc0.ɵɵpipeBind2(5, 15, ctx.to.options, ctx.field)));\n      }\n    },\n    directives: [ɵngcc1.MatSelect, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective, ɵngcc3.FormlyAttributes, ɵngcc2.RequiredValidator, ɵngcc4.NgIf, ɵngcc5.MatOption, ɵngcc5.MatPseudoCheckbox, ɵngcc4.NgForOf, ɵngcc4.NgTemplateOutlet, ɵngcc5.MatOptgroup],\n    pipes: [ɵngcc4.AsyncPipe, ɵngcc6.ɵa],\n    encapsulation: 2\n  });\n  return FormlyFieldSelect;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet FormlyMatSelectModule = /*#__PURE__*/(() => {\n  class FormlyMatSelectModule {}\n\n  FormlyMatSelectModule.ɵfac = function FormlyMatSelectModule_Factory(t) {\n    return new (t || FormlyMatSelectModule)();\n  };\n\n  FormlyMatSelectModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: FormlyMatSelectModule\n  });\n  FormlyMatSelectModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, ReactiveFormsModule, MatSelectModule, MatPseudoCheckboxModule, FormlyMatFormFieldModule, FormlySelectModule, FormlyModule.forChild({\n      types: [{\n        name: 'select',\n        component: FormlyFieldSelect,\n        wrappers: ['form-field']\n      }]\n    })]]\n  });\n  return FormlyMatSelectModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlyMatSelectModule, {\n    declarations: function () {\n      return [FormlyFieldSelect];\n    },\n    imports: function () {\n      return [CommonModule, ReactiveFormsModule, MatSelectModule, MatPseudoCheckboxModule, FormlyMatFormFieldModule, FormlySelectModule, ɵngcc3.FormlyModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { FormlyMatSelectModule, FormlyFieldSelect }; //# sourceMappingURL=ngx-formly-material-select.js.map","map":null,"metadata":{},"sourceType":"module"}