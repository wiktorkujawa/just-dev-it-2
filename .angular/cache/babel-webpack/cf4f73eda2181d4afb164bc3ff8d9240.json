{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { catchError, map, concatMap, switchMap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport * as UserActions from '../actions/user.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../services/auth.service\";\nexport let UserEffects = /*#__PURE__*/(() => {\n  class UserEffects {\n    constructor(actions$, authService) {\n      this.actions$ = actions$;\n      this.authService = authService;\n      this.register$ = createEffect(() => {\n        return this.actions$.pipe(ofType(UserActions.register), concatMap(action => this.authService.register(action.data).pipe(map(success => UserActions.registerSuccess({\n          success\n        })), catchError(error => of(UserActions.registerFailure({\n          error\n        }))))));\n      });\n      this.login$ = createEffect(() => {\n        return this.actions$.pipe(ofType(UserActions.login), concatMap(action => this.authService.login(action.data).pipe(map(data => UserActions.loginSuccess({\n          data\n        })), catchError(error => of(UserActions.loginFailure({\n          error\n        }))))));\n      });\n      this.logout$ = createEffect(() => {\n        return this.actions$.pipe(ofType(UserActions.logout), switchMap(() => this.authService.logout().pipe(map(success => UserActions.logoutSuccess({\n          success\n        })), catchError(error => of(UserActions.loadUserFailure({\n          error\n        }))))));\n      });\n      this.loadUser$ = createEffect(() => {\n        return this.actions$.pipe(ofType(UserActions.loadUser), switchMap(() => this.authService.getUser().pipe(map(user => UserActions.loadUserSuccess({\n          user\n        })), catchError(error => of(UserActions.loadUserFailure({\n          error\n        }))))));\n      });\n    }\n\n  }\n\n  UserEffects.ɵfac = function UserEffects_Factory(t) {\n    return new (t || UserEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.AuthService));\n  };\n\n  UserEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserEffects,\n    factory: UserEffects.ɵfac\n  });\n  return UserEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}